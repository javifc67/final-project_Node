'use strict';


const schedule = require('node-schedule');
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const passport = require('passport');
const session = require('express-session');
const routes = require('./routes/index');

const app = express();
require('./passport/twitter-auth');
require('./passport/facebook-auth');

let server = null;
app.use(bodyParser.json());
/* app.use(cors()); */
app.use(session({
  secret: 'secret',
  resave: true,
  saveUninitialized: true,
  cookie: {
    secure: 'auto',
  },
}));

app.use(passport.initialize());
app.use(passport.session());


/**
 * Enable CORS with a origin whitelist of valid domains
 * Step 1: Add CORS
 */


app.use((req, res, next) => {
  const accessControlAllowMethods = [
    'POST', 'GET', 'PUT', 'DELETE', 'OPTIONS'];

  const accessControlAllowHeaders = [
    'Location', 'Authorization', 'Content-Type'];

  res.setHeader('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Credentials', 'true');
  // Access-Control-Allow-Methods: put accessControlAllowHeaders separated by comma
  res.header('Access-Control-Allow-Methods', accessControlAllowMethods.join(','));
  // put accessControlAllowHeaders separated by comma
  res.header('Access-Control-Allow-Headers', accessControlAllowHeaders.join(','));
  res.header('Access-Control-Expose-Headers', accessControlAllowHeaders.join(','));
  next();
});

/**
 * Add all routes
 */
app.use('/api', routes.accountRouter);
app.use('/api', routes.userRouter);
app.use('/api', routes.puaRouter);
app.use('/api/twitter', routes.twRouter);

app.get('/api/login/twitter', passport.authenticate('twitter', { state: 'pokpokpokpokpokpopok' }));
app.get('/test/twitter',

  passport.authenticate('twitter', {
    failureRedirect: '/login',
  }), (req, res) => {
    res.redirect('http://127.0.0.1:4200/twitter/home');
  });


app.get('/api/login/facebook',
  passport.authenticate('facebook', { state: 'fakfkakafkakfakfaakffakfakfkfa' }));

app.get('/auth/facebook/callback',
  passport.authenticate('facebook', {
    failureRedirect: '/login',
  }), (req, res) => {
    res.redirect('http://127.0.0.1:4200/home');
  });


app.use('*', (req, res, next) => res.status(404).send({
  message: 'SE SIENTE, TUS AMUGÃœIS NO ESTAN AQUI',
}));

/**
 * Special route middleware to catch all next(err) generated by controllers
 */
app.use((err, req, res, next) => {
  console.error('Error 500', err);
  return res.status(500).json({
    message: err.message,
  });
});

/**
 * Start listening requests at a given port
 * @param {Number} port
 */
async function listen(port) {
  if (server === null) {
    server = await app.listen(port);
  } else {
    console.error("Can't listen, server already initialized");
  }
}

/**
 * Stop listening requests
 */
async function close() {
  if (server) {
    await server.close();
    server = null;
  } else {
    console.error("Can't close a non started server");
  }
}

module.exports = {
  listen,
  close,
};
